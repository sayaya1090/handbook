apiVersion: batch/v1
kind: Job
metadata:
  name: initialize-{{ .Release.Namespace }}-job
  namespace: openshift-gitops
  annotations:
    # 이 리소스를 ArgoCD의 Sync Hook으로 지정합니다.
    argocd.argoproj.io/hook: Sync
    # Hook(Job)이 성공적으로 완료되면, ArgoCD가 이 리소스를 자동으로 삭제하도록 합니다.
    argocd.argoproj.io/hook-delete-policy: HookSucceede
    # 대신 Sync Wave를 지정하여 순서를 제어합니다.
    argocd.argoproj.io/sync-wave: "2"
spec:
  # Job 완료 후 30초가 지나면 자동으로 삭제되도록 설정합니다.
  # Job 완료 후 자체 삭제 기능은 Hook 정책과 중복될 수 있지만, 안전장치로 남겨둡니다.
  ttlSecondsAfterFinished: 30
  template:
    spec:
      serviceAccountName: openshift-gitops-argocd-application-controller
      containers:
        - name: dind-authority-promotion
          image: registry.redhat.io/openshift4/ose-cli
          command:
            - "/bin/sh"
            - "-c"
            - |
              # 변수 설정
              NAMESPACE="{{ .Release.Namespace }}"
              LABEL_KEY="pod-security.kubernetes.io/enforce"
              LABEL_VALUE="privileged"

              # 네임스페이스 레이블 설정
              echo "=> Checking for '$LABEL_KEY=$LABEL_VALUE' label on namespace '$NAMESPACE'..."
              CURRENT_VALUE=$(oc get namespace "$NAMESPACE" -o jsonpath="{.metadata.labels.pod-security\.kubernetes\.io/enforce}" 2>/dev/null)
              if [ "$CURRENT_VALUE" != "$LABEL_VALUE" ]; then
                echo "=> Label not found or has incorrect value. Applying label..."
                oc label namespace "$NAMESPACE" "$LABEL_KEY=$LABEL_VALUE" --overwrite
              else
                echo "=> Label is already set correctly. Skipping."
              fi
      restartPolicy: Never
  backoffLimit: 2
